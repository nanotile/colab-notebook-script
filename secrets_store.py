# -*- coding: utf-8 -*-
"""*SECRETS_STORE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13JodN-z8PaPhlpa9R9GRQk_b7CyGtNeN

A Python script designed for Google Colab that allows you to securely store and retrieve secrets (like API keys or passwords) in your Google Drive. The secrets are encrypted using a password you provide, ensuring they remain secure even if someone gains access to your Google Drive.
"""

# Install the cryptography library
!pip install cryptography

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

"""# **functions to store and retrieve secrets**"""

import os
import base64
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.fernet import Fernet, InvalidToken
from cryptography.hazmat.backends import default_backend

def derive_key(password: str, salt: bytes) -> bytes:
    """Derive a key from the password and salt using PBKDF2 HMAC SHA256."""
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100_000,
        backend=default_backend()
    )
    return base64.urlsafe_b64encode(kdf.derive(password.encode()))

def store_secret(secret_name: str, secret_value: str, password: str):
    """Encrypt and store the secret in Google Drive."""
    # Generate a random salt
    salt = os.urandom(16)
    key = derive_key(password, salt)
    fernet = Fernet(key)
    encrypted_secret = fernet.encrypt(secret_value.encode())

    # Define the file path in Google Drive
    filepath = f'/content/drive/MyDrive/secrets/{secret_name}.secret'
    os.makedirs(os.path.dirname(filepath), exist_ok=True)

    # Save the salt and encrypted secret
    with open(filepath, 'wb') as file:
        file.write(salt + encrypted_secret)
    print(f"Secret '{secret_name}' has been securely stored.")

def retrieve_secret(secret_name: str, password: str) -> str:
    """Retrieve and decrypt the secret from Google Drive."""
    filepath = f'/content/drive/MyDrive/secrets/{secret_name}.secret'
    if not os.path.exists(filepath):
        raise FileNotFoundError(f"Secret '{secret_name}' not found.")

    with open(filepath, 'rb') as file:
        data = file.read()
    salt = data[:16]
    encrypted_secret = data[16:]
    key = derive_key(password, salt)
    fernet = Fernet(key)

    try:
        decrypted_secret = fernet.decrypt(encrypted_secret)
        return decrypted_secret.decode()
    except InvalidToken:
        raise ValueError('Invalid password or corrupted secret.')

"""# **USE:   To Store a Secret:**"""

# Prompt the user for a password and the secret to store
password = input('Enter a password to encrypt the secret: ')
secret_value = input('Enter the secret value: ')
secret_name = input('Enter a name for the secret: ')
'''
# Store the secret
#Enter password via terminal
password = input('Enter a password to encrypt the secret: ')
password = 'a'
secret_name = 'FMP'
secret_value = 'ddvUiZmn7lCVUpuHlRrrDhvkh1NhlnFF'
store_secret(secret_name, secret_value, password)
'''

"""# **USE:   To Retrieve a Secret:**"""

# Prompt the user for the password and the name of the secret to retrieve
password = input('Enter the password to decrypt the secret: ')
secret_name = input('Enter the name of the secret: ')

# Retrieve and display the secret
try:
    secret_value = retrieve_secret(secret_name, password)
    print(f"The secret value is: {secret_value}")
except (FileNotFoundError, ValueError) as e:
    print(e)